// Copyright (c) the JPEG XL Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "jxl/xorshift128plus.h"

#include <stdint.h>

#include <algorithm>
#include <vector>

#include "gtest/gtest.h"
#include "jxl/base/data_parallel.h"
#include "jxl/base/thread_pool_internal.h"

namespace jxl {
namespace HWY_NAMESPACE {
namespace {

// Define to nonzero in order to print the (new) golden outputs.
#define PRINT_RESULTS 0

const size_t kVectors = 64;

#if PRINT_RESULTS

template <int kNumLanes>
void Print(const uint64_t (&result)[kNumLanes]) {
  printf("{ ");
  for (int i = 0; i < kNumLanes; ++i) {
    if (i != 0) {
      printf(", ");
    }
    printf("0x%016lXull", result[i]);
  }
  printf("},\n");
}
#endif  // PRINT_RESULTS

const uint64_t kExpected[kVectors][Xorshift128Plus::N] = {
    {0xE57D429BCBF7CBB1ull, 0xD409D608465DA2A2ull, 0xF33DAEF5C060AE99ull,
     0xDD0768FA29FD6896ull, 0x70DE3CCD8DDCF532ull, 0x617908C4E4DE7E32ull,
     0x9FE35280D25C0DD0ull, 0xFC0FC203EC34D836ull},
    {0xABC72C7F0DFAFD55ull, 0x3DC7516EAEFC178Eull, 0xF9C0F467E92843C6ull,
     0x106F209938F24441ull, 0x68C95808217F699Full, 0x419CFE6050EA062Eull,
     0x1CD4976BEB1DB4A0ull, 0xDA8311DEF1AB2299ull},
    {0xCC171C4D5510FD32ull, 0xD1059F8519FC387Bull, 0x0BF9802AB0CD2848ull,
     0x0C94B2274A1DA664ull, 0x0348B2B0976EB019ull, 0x272092955EFD9330ull,
     0xB387F47E321F4801ull, 0x9803026497BD9F18ull},
    {0x38E5D5EC43AE6A10ull, 0x59C7999E07FE7ACEull, 0x926733F0F8371230ull,
     0x4423EDCE6C8DC6F4ull, 0x6D3011EEC454FF1Bull, 0xF970E961F4F6CACDull,
     0xBC844A3B01D942E0ull, 0xCD6E29C9F44E8915ull},
    {0x25B70DD81E7738CAull, 0xCC90B3B446728FFAull, 0x1C74221A22BEB66Aull,
     0x36BDE1375913FDA8ull, 0x6F471E35D83F1D4Cull, 0x0B10DD0B08AA76AFull,
     0xB56CD19CD3AF8BF0ull, 0xFC53E99B9E66D3B4ull},
    {0xF0AB794697B774CEull, 0x25AEF6A691010AE9ull, 0x2EF44B85C2C0638Eull,
     0x6D603B0AF1E783D5ull, 0xC44BA15692234216ull, 0x7CC4AC08578451DEull,
     0xEA2BCAACE5313675ull, 0x861F055431031B9Bull},
    {0x8F782C99EB93931Aull, 0xB621588B882EEA9Eull, 0x083ED710D1E40E69ull,
     0x95468E592E7A976Full, 0x9F79D6E0DDE76FD1ull, 0xA712ADE3916DCA79ull,
     0xD584B73362038793ull, 0x06FD29ACF5CFF04Cull},
    {0x0935DC4F3E1E59C7ull, 0xC2AEF358C86A3D1Eull, 0x930ED570BEA39FD6ull,
     0xCEAB9F42FB1772A8ull, 0x5B2856D66DD0D725ull, 0x24B93595478B0F58ull,
     0xB887CA012F1756B9ull, 0x9E4417FE78ECECBEull},
    {0x20E3BC288C0085B9ull, 0x9A15C05159F39A8Full, 0x52378DDEA00C1439ull,
     0xD1033445AB3E6656ull, 0x2C71F7E6C2ECD397ull, 0xC318AFA4AFCA5901ull,
     0xD1FDAB980D7212D6ull, 0x74604CAE55F39313ull},
    {0xE764EC148914275Full, 0x713BC1A5A6AB08BCull, 0x6EF34BC0C4072670ull,
     0xF93539FD8BD6AEAEull, 0x0A48B717F684F17Eull, 0x26E1E4EFE1F6D547ull,
     0x1DBB6220AFED9EE0ull, 0x9AD50F69A198F580ull},
    {0xD6F811F172838CE2ull, 0x136FFBC56AC4A5DDull, 0xD9632E7A2E929D36ull,
     0xB2B459999AD05D90ull, 0x78001609755916C1ull, 0x24A7E6869B972C75ull,
     0x1E040ABAF2143A75ull, 0x95EEA900D6C93DFCull},
    {0x0475CB5BD01CE1E3ull, 0xAAAB2443A332FBBBull, 0xBE3AAE00AC34C4DDull,
     0x76A202BF5643935Cull, 0xB62E1C0916C84FF1ull, 0x3DC568DE07A226DFull,
     0xC1AB6C7709270F5Bull, 0xF34E2950E8FF383Cull},
    {0x4B5AB7E8D065929Cull, 0x4B303F81416817F8ull, 0x9191E7B479B0FC7Full,
     0xEB86A57E8CF9ECF5ull, 0x50F28DEF8DD7BF1Dull, 0xDB01F2DE36250173ull,
     0xEF9A526F9AE4C5B8ull, 0xD1F5AED58FD5416Aull},
    {0xF05D0858E7402214ull, 0x1C9E8ACAD3636326ull, 0x0CF031BB5967B43Cull,
     0xB2D7CEEF3393DF8Aull, 0xB27ECC7E343A33ADull, 0x94EBC2BFBBA22D44ull,
     0x7C45214465A126EAull, 0x18D94F208C21F55Dull},
    {0x232405F45B4197A2ull, 0x77DE013E9755B379ull, 0xFE7A7F642331A4AAull,
     0x4E01955CBBD5BA8Full, 0x8626F42DB98C65B4ull, 0x30F4E6FCC82DE010ull,
     0xD2592D51E8A9B8E8ull, 0x2FE77E6522E00477ull},
    {0x0ABE8BC56E5B0513ull, 0xF2517C0B9841D243ull, 0x350E5A826B5AF9B1ull,
     0x31CB7D9D31F93DB1ull, 0x0537129E66961239ull, 0xF6829BF45B116861ull,
     0x16043F8604A4C62Cull, 0x60CF7DA19A2F4BADull},
    {0x6F6A9DF8FE1E6D1Cull, 0x4CCF5272722770B4ull, 0xBEDA23DCA1FF32A4ull,
     0x14AB8FA09305D907ull, 0xAF924FE7523018F9ull, 0xFF93C68C60EBB2D9ull,
     0x5F6DE063BD1CCFEEull, 0x8933B97896111A93ull},
    {0x52789E30890BE8E2ull, 0xCEC7468F25E878BAull, 0xBC5A3A9BB7738768ull,
     0x1C350D17BB7855F5ull, 0xF1F50FCA0748146Bull, 0xC05A24EB51636BD8ull,
     0xCF8C49D3FCDC384Eull, 0x78DCDD3E403D0E05ull},
    {0xF36E34314FA1CB41ull, 0x71449EA6244FB584ull, 0x4964C689B76D7143ull,
     0xC8CEA7E0EE6C12EBull, 0xD4DED2DD182967BFull, 0xE8BFC70338C37EF7ull,
     0xABDF362FBF98BFDEull, 0xA0F59A3EAD936DA8ull},
    {0x32C09999C30A1B98ull, 0x919CF62E9BE1B90Cull, 0x34AB8EAC92900753ull,
     0x6BC1690777698728ull, 0x5E39E5CB0783D8A3ull, 0xBD1A1FBA3D6D6DF0ull,
     0x88C97C8508454751ull, 0xC43EE86A4BFD0553ull},
    {0xC607A8A4A7C7E83Bull, 0x586CAE6F11B19AC3ull, 0xE105DBDF9956C6BBull,
     0x7EC474745F81F12Bull, 0x097583AAD464EBA8ull, 0xE80DA6B2E29F3FD1ull,
     0x33FA8B7A2D7D0DAAull, 0x141CFBC57390A642ull},
    {0x210CFF7D274CC26Bull, 0x6D69290A78725AA0ull, 0x197968442E5BCA29ull,
     0xC72AB6EBB0C74932ull, 0xA5A5078C8C9BC4EBull, 0x277CA101F1AF4745ull,
     0xA924A4B7487A09A3ull, 0x1D9D2FC8A827BB38ull},
    {0xD7AE9CA43C7E4858ull, 0x302564BCE6D79113ull, 0xE42B126E8EE911FCull,
     0xC5044B0019A40D78ull, 0xEE49138094ED59AEull, 0x2E64E870090AFA95ull,
     0x6818A204E82DD36Bull, 0x2685C620728FB120ull},
    {0x47D1EB9BD1715CDEull, 0xE3855B939C633DE9ull, 0x8676EA385D02520Dull,
     0x0AD0BCC21E49A3E9ull, 0xA0276EEAA31AC707ull, 0x8132DB6DF80A9DACull,
     0x41F448B11655620Eull, 0xC48EB17C2691CC1Aull},
    {0x5C7B5C4D56C02D9Bull, 0x47819CA6AF8BDE76ull, 0xA6BEC45D58F79D82ull,
     0xD8744220BD128C62ull, 0x78AB538D1731ED2Aull, 0x052F2E4C6FCB7ED5ull,
     0x2403C0F4E1E82FB1ull, 0xB78559371438C620ull},
    {0xAD456248EA5EBB8Dull, 0xED86CDA340A6012Full, 0x49D63F93D4DB0B08ull,
     0x07EFDF5D55250D37ull, 0x20DE21454E436201ull, 0xEFC52935E813239Cull,
     0x5AAE0E7EDFC49EA2ull, 0xF7F29F38AA741284ull},
    {0x357086BF543F3283ull, 0x01267109C9C935D1ull, 0xC0505E3E42BAFC7Dull,
     0x4B0C85D53D41F246ull, 0xDE3D5B4FEF83DE6Eull, 0xBDAAB24F078A5CE7ull,
     0x2E39115A1A86AE38ull, 0xC1AAAA59DB3817AFull},
    {0x6FEF7D4B573924F5ull, 0xD42E75460CF06368ull, 0x2068E4481AD02980ull,
     0x184F3163DE3F173Full, 0xCB158DCEDB462B71ull, 0x2943B98DE4E17B71ull,
     0x5B2C60D97D09AD73ull, 0xB38CEEE539DC5ED3ull},
    {0xAB14C4B7D81C32C2ull, 0xC403C2C9F35A6518ull, 0xBA3D4EC5D73D4678ull,
     0x69C06180321E4E87ull, 0xF9C1A9120CA423BDull, 0xAF49B2CEA398C375ull,
     0x47FDADF1F4A6C69Full, 0x57D31E72078AF15Aull},
    {0xA2DCD2450694853Dull, 0x8D615C90B34F5CC5ull, 0xABD4E2B4092FB864ull,
     0xFC7B2A796227EC37ull, 0x8011950E3EF76F0Aull, 0x49E4DF900AB1CBDFull,
     0x08EA8BF48FC7B35Cull, 0x70E9EE9E4F00A31Full},
    {0x8BCD34C2CD790F20ull, 0xEE59008F7DE6F50Dull, 0x721797508237DBE4ull,
     0x8DCF5025BAE4128Dull, 0x4D97EE955DA52E32ull, 0xF5B2ED46346A6D2Full,
     0x7103AFF8D8A32007ull, 0x265DF60E92A206EDull},
    {0x8FFCF9912B73FDE4ull, 0x6D992045B14F2F43ull, 0xC2390CFE4D081736ull,
     0x2D6DCEA3C054D66Cull, 0x8B497E8838193695ull, 0x8DB2903176BF4151ull,
     0x0BA2542407C8A145ull, 0xD8CC8007EE247247ull},
    {0x6D039DFB5A4466A1ull, 0x2B7AC59391F987FBull, 0x8F0C8CB07AC346B0ull,
     0x9AA2105D60039661ull, 0xE0C9058949A881B5ull, 0x67106B25782F02DDull,
     0x4688DF0C63182B9Eull, 0x67AF5F64849C28D0ull},
    {0xE5EF87BCEBD571D0ull, 0x8CDC03BCD571A74Eull, 0x2C99A956C89A8147ull,
     0x729622DCA5236E78ull, 0x3AD35A6890590251ull, 0x437E8E3AE80241ADull,
     0xA67E7AB9002EBAF1ull, 0xCCC448C4682B37E5ull},
    {0x2E1A5D060B93FB3Cull, 0x66F0580ECA05D71Dull, 0x4417AD979075B32Aull,
     0x5CC1F9A4FBE3E509ull, 0x4FFB6B5122E0AF21ull, 0x6E247D49ED6C3ED1ull,
     0x09AA116B8B79F254ull, 0x50DF99ACB68461CCull},
    {0xFFA5AF4A05473A61ull, 0x129B5536D74E002Bull, 0x7CBF21B7F4AAB340ull,
     0x5D368F9646757428ull, 0xA3B6FFDD731B24EFull, 0x263F3A713B3600F0ull,
     0xE636E0E0A07B1DDCull, 0x8C0D3DB62CE94B7Bull},
    {0x339D01864E26F8D1ull, 0x7BC54480ED405173ull, 0xA73C4590FCFDDE21ull,
     0x68486F8063E151EDull, 0x8084E97B1E754352ull, 0x7F556F3C4636525Bull,
     0x70C598DEB3B6BD14ull, 0xEFF23E9DE385C733ull},
    {0xD21377E73D5228A9ull, 0xD8E71E583CFB7EA7ull, 0xD247EC066D9DF9ADull,
     0xCE2E5796DE66E8CDull, 0x4C15D9257CC03A09ull, 0xA0736B8215E8C5B0ull,
     0xB33D8F6503FC9C93ull, 0x8752A30BF4A47E44ull},
    {0x93536BAA8A4E3C64ull, 0xCF4A40768840F562ull, 0x4F67B9F9C69F3209ull,
     0x1A4191EECCDAF107ull, 0x0913C01EC7682ABFull, 0xD6728915E6A4E1EEull,
     0x4C0E895F65FCD13Bull, 0xC4DE18972061427Bull},
    {0x19CD2286B787DD96ull, 0x9438FAF9E402F3D5ull, 0x2E26CBF57B18C3EDull,
     0xF494799C5FD0F468ull, 0x6FF44B76887E09B3ull, 0xAE294393940F9EA1ull,
     0x064D3BA251950313ull, 0x0F66056AAC458B51ull},
    {0x340F853AFBF3E356ull, 0xEF3D39340621DFF2ull, 0x2580452508A04CE8ull,
     0xFB5B5016193E4C84ull, 0x7927043E083219FDull, 0x7CAC7DC943C55AD9ull,
     0xB45BE046B20C1E1Cull, 0xA2A26F6CD4981F72ull},
    {0x7B318C926156EDB3ull, 0x11D250F130316AEDull, 0xCE90DAB86764678Cull,
     0x048AE20531F2660Cull, 0xCA4BB8219AB468E6ull, 0x436AA30CA4FB0A8Eull,
     0xB631D2B370C43B30ull, 0xA717551B4CC52546ull},
    {0x89DF5A885FE53A7Full, 0x304B290B0A92326Eull, 0xF189B7BFDAF3259Aull,
     0x3DDFC94D0B3A80A9ull, 0xCA42DA2BAEAB111Dull, 0xC9D9C056C41382ABull,
     0x1683B5E15378EFEAull, 0xF4C94EF6FA84C585ull},
    {0xB1AC121140D16E17ull, 0xBFFC45C22BB6D475ull, 0x6892B99251285291ull,
     0x36CC7CF99098145Eull, 0xC4AB7BCC7EB1E3E8ull, 0xA684A120F05072D8ull,
     0x0E6008652E79B25Dull, 0x72FF3B8D72B838B6ull},
    {0xC8C91D3CBF42F23Aull, 0x8C5EA25B83C3DA57ull, 0xEAE6E5555B88040Full,
     0x4DBA6D33F553E010ull, 0xCC9F2C0E1AD3351Full, 0xBD1D554DD7650FB0ull,
     0xFCEC97B85BB9F615ull, 0x7AC77933D98D237Aull},
    {0x268A991694A88E8Bull, 0x2954B370C5794E80ull, 0xAA9BE8A0B9289539ull,
     0x359C2DCBC7288B7Dull, 0x2CC774E17B48FCF0ull, 0xADE07AD94EBE348Full,
     0x4668225086AE65CDull, 0x9F4ADAFC19D2E1FFull},
    {0xF5AB6C7F2438B113ull, 0xB8B9796BB1F8ABA5ull, 0xA2D5F3955BB52BB8ull,
     0x759F72DA1A29C887ull, 0x9BFFC8BC2E6E6D3Cull, 0x26ABC4027348221Aull,
     0x00C35B0456E7D008ull, 0xD7C3B53D4317B389ull},
    {0xD7C06A9EB9C2AA67ull, 0x2B43D2BB4D8893A0ull, 0x448BA8089D6BBC82ull,
     0xBDCA1E61406CE83Cull, 0x2346CB4ACD52A7FAull, 0xD8E8CEBE1223FD34ull,
     0x1E276720DFBF519Bull, 0x6E86A68A604294CDull},
    {0x4754F6FF7C5093B6ull, 0x134A362980B4C4C6ull, 0x02DBBBDEE06A0113ull,
     0x3AD02F87FFCB0877ull, 0x95D242C0C99184A9ull, 0xEC3E78DF8E171883ull,
     0x880766F8FB62E142ull, 0x5774BDBEEFE2ECEFull},
    {0xFA8519C45B9AC144ull, 0xF1B5F11E955BE024ull, 0x81A79B0A80E52D42ull,
     0x0B708908BEC35874ull, 0x39007F7D2AB4272Aull, 0xA2140C50BCAADE31ull,
     0x567953E428C5AAB0ull, 0xA30A6793FACD70F8ull},
    {0x88006BA8EEDDEC9Bull, 0xA7488475FB7801F9ull, 0xE287BCA951A6E934ull,
     0x8E75D7DF95AAD7BDull, 0x8DDE60C72F00B2E1ull, 0xEF8582121EB36C60ull,
     0x80BF8896DBA52C6Bull, 0xAE212787FAFA2E31ull},
    {0x9837A02183186435ull, 0xFC3AC585D8B60BABull, 0x7513F58AD93C7992ull,
     0x3EB5A96563AC9A26ull, 0x6A369CAE5860A637ull, 0x6F518B805A9B45EBull,
     0xE6656B6E74591BE8ull, 0x03E2529E04D270DDull},
    {0x72CFDDCE6FFC0F89ull, 0xCD7F97B19BB3F949ull, 0x82644123E65EC706ull,
     0x5110936324CC613Dull, 0x2F4A3ACDB6E2E929ull, 0x31E1002A6DDEDF36ull,
     0xB13A20047EDB0E18ull, 0xF274CDBF44301FABull},
    {0x1DB2F773453926EEull, 0x38BB71AB95C29B6Aull, 0x92C1A0E9A1A2A4DAull,
     0x0A37D050C9AD0A6Eull, 0xD7F1DAD7AE488E0Eull, 0x724A43415990C17Aull,
     0xDF32F1C71003A688ull, 0xA6D181EA54CAC105ull},
    {0x27069F86A0023C59ull, 0x4802D57205AE7ACDull, 0xA3B257DDCFE9597Dull,
     0xFA1C90DB1D068B05ull, 0xBF58DF4988E56A62ull, 0xB1D05A43331C9A62ull,
     0xD3885EACE06C6AE2ull, 0x645124896F3363C5ull},
    {0x2CAC63167BB6DFB8ull, 0xEBC01D4E9CAD8F6Dull, 0xEE939E5DEB65A94Cull,
     0xC1872BC1E8C7E597ull, 0xCBB3B48ABEA3F935ull, 0xD5E36FB19A4436CFull,
     0xC3C7A129D4BADA16ull, 0x895006606ACAF7AAull},
    {0x232AC9194D2634ECull, 0xD1EB2A7103B56D0Dull, 0xC77F706B0409425Aull,
     0x7C1361A0974E3FD5ull, 0x4359422326151812ull, 0xDABF671CA5F3FC38ull,
     0x0AEE8B4964C9A80Eull, 0xEFFB22551D3D225Full},
    {0x6668F7DE6E4BA454ull, 0x33E1048790F618AFull, 0x0F9CDFBBDB62E113ull,
     0x9FA1A91FC63FB239ull, 0x64595DEEAA8A2271ull, 0x35E71D20801E7483ull,
     0xD82D7E79D142F612ull, 0xBA4B6600F25A33FEull},
    {0x2C7E2B3FDFD58C27ull, 0x9B2E24A5EC33F85Dull, 0x5269136821B51004ull,
     0xCAF3CBA5352DF391ull, 0x4D2380F14167F6ACull, 0x41B72E326872F5AFull,
     0x5B43216C9D058B28ull, 0xD0C016BBB650292Aull},
    {0x5467777A0EF33FCBull, 0xBAEAB899997E07DEull, 0x9851A1A8895ECAB6ull,
     0x8CA5F6FDA29F1705ull, 0xCC4602E069497728ull, 0x3358603908632AECull,
     0xBF7EDEEBAE872D03ull, 0xC84332C49E298700ull},
    {0x10800F61FDC6FFEEull, 0x8E71F723FF36A58Aull, 0xF82EEB504F450A2Aull,
     0x356037B45247E035ull, 0x69DC8BF6D5642C75ull, 0x1A7D71BA0C794DCBull,
     0x717625EC7025D0C8ull, 0xC5B16D653B526F98ull},
    {0xC3332F21FCF9353Eull, 0x410FB53C081C1E48ull, 0x80DDA11931F4DA34ull,
     0x581647EA07D56297ull, 0x762DA15445101202ull, 0x7F38819F3FC36BD1ull,
     0x07363A2FCFC75C2Bull, 0xAEDB7A939981DE72ull},
    {0x099C4A9511D70019ull, 0xFE303D0DCD28A8C5ull, 0xE58634C0FFCB40F6ull,
     0xDFF372E7DBD4B092ull, 0xA33A58219FCAD09Cull, 0xCD7C3241A60E7A96ull,
     0x38219A6A1996A8B0ull, 0x99B6D144D7A60904ull},
    {0x30E2377AC5E67EF5ull, 0x31E058DD8EA10F84ull, 0x5FB57E154B9E64BFull,
     0xE4E585D3AF94EF97ull, 0x8F9AE0A30DD3A9B1ull, 0x289D730C3FDAB25Eull,
     0xBFE76D6C3255A7BFull, 0x6391A94D4FAD0EFBull},
};

HWY_ATTR void Xorshift128PlusTest_TestGolden() {
  HWY_ALIGN Xorshift128Plus rng(12345);
  for (uint64_t vector = 0; vector < kVectors; ++vector) {
    HWY_ALIGN uint64_t lanes[Xorshift128Plus::N];
    rng.Fill(lanes);
#if PRINT_RESULTS
    Print(lanes);
#else
    for (size_t i = 0; i < Xorshift128Plus::N; ++i) {
      ASSERT_EQ(kExpected[vector][i], lanes[i])
          << "Where vector=" << vector << " i=" << i;
    }
#endif
  }
}
// Ensures Xorshift128+ returns consistent and unchanging values.
TEST(Xorshift128PlusTest, TestGolden) { Xorshift128PlusTest_TestGolden(); }

// Output changes when given different seeds
HWY_ATTR void Xorshift128PlusTest_TestSeedChanges() {
  HWY_ALIGN uint64_t lanes[Xorshift128Plus::N];

  std::vector<uint64_t> first;
  constexpr size_t kNumSeeds = 16384;
  first.reserve(kNumSeeds);

  // All 14-bit seeds
  for (size_t seed = 0; seed < kNumSeeds; ++seed) {
    HWY_ALIGN Xorshift128Plus rng(seed);

    rng.Fill(lanes);
    first.push_back(lanes[0]);
  }

  // All outputs are unique
  ASSERT_EQ(kNumSeeds, first.size());
  std::sort(first.begin(), first.end());
  first.erase(std::unique(first.begin(), first.end()), first.end());
  EXPECT_EQ(kNumSeeds, first.size());
}

TEST(Xorshift128PlusTest, TestSeedChanges) {
  Xorshift128PlusTest_TestSeedChanges();
}

HWY_ATTR void Xorshift128PlusTest_TestFloat() {
  ThreadPoolInternal pool(8);

  // All 14-bit seeds
  pool.Run(0, 16384, ThreadPool::SkipInit(),
           [](const int seed, const int /*thread*/) HWY_ATTR {
             HWY_ALIGN Xorshift128Plus rng(seed);

             const HWY_FULL(uint32_t) du;
             const HWY_FULL(float) df;
             HWY_ALIGN uint64_t batch[Xorshift128Plus::N];
             HWY_ALIGN float lanes[df.N];
             double sum = 0.0;
             size_t count = 0;
             const size_t kReps = 2000;
             for (size_t reps = 0; reps < kReps; ++reps) {
               rng.Fill(batch);
               for (size_t i = 0; i < Xorshift128Plus::N * 2; i += df.N) {
                 const auto bits =
                     Load(du, reinterpret_cast<const uint32_t*>(batch) + i);
                 // 1.0 + 23 random mantissa bits = [1, 2)
                 const auto rand12 = BitCast(
                     df, hwy::ShiftRight<9>(bits) | Set(du, 0x3F800000));
                 const auto rand01 = rand12 - Set(df, 1.0f);
                 Store(rand01, df, lanes);
                 for (float lane : lanes) {
                   sum += lane;
                   count += 1;
                   EXPECT_LE(lane, 1.0f);
                   EXPECT_GE(lane, 0.0f);
                 }
               }
             }

             // Verify average (uniform distribution)
             EXPECT_NEAR(0.5, sum / count, 0.02);
           });
}

// Not more than one 64-bit zero
TEST(Xorshift128PlusTest, TestNotZero) {
  ThreadPoolInternal pool(8);

  pool.Run(0, 2000, ThreadPool::SkipInit(),
           [](const int task, const int /*thread*/) HWY_ATTR {
             HWY_ALIGN uint64_t lanes[Xorshift128Plus::N];

             HWY_ALIGN Xorshift128Plus rng(task);
             size_t num_zero = 0;
             for (size_t vectors = 0; vectors < 10000; ++vectors) {
               rng.Fill(lanes);
               for (uint64_t lane : lanes) {
                 num_zero += static_cast<size_t>(lane == 0);
               }
             }
             EXPECT_LE(num_zero, 1);
           });
}

TEST(Xorshift128PlusTest, TestFloat) { Xorshift128PlusTest_TestFloat(); }

}  // namespace
// NOLINTNEXTLINE(google-readability-namespace-comments)
}  // namespace HWY_NAMESPACE
}  // namespace jxl
